CREATE DATABASE IF NOT EXISTS modul3;

USE modul3;

DROP DATABASE modul3;
CREATE TABLE IF NOT EXISTS anggota (
id_anggota VARCHAR(10) NOT NULL PRIMARY KEY,
nama_anggota VARCHAR(20) NOT NULL, 
tempat_lahir_anggota VARCHAR(20) NOT NULL,
tanggal_lahir_anggota DATE,
no_telp INT(12) NOT NULL,
jenis_kelamin VARCHAR(15) NOT NULL
);

CREATE TABLE IF NOT EXISTS petugas (
id_petugas VARCHAR(10) NOT NULL PRIMARY KEY,
username VARCHAR(15) NOT NULL,
PASSWORD VARCHAR(15) NOT NULL,
nama VARCHAR(25) NOT NULL
);

CREATE TABLE IF NOT EXISTS  buku (
kode_buku VARCHAR(10) NOT NULL PRIMARY KEY ,
judul_buku VARCHAR(25) NOT NULL,
pengarang_buku VARCHAR(30) NOT NULL,
tahun_buku VARCHAR(10) NOT NULL,
jumlah_buku VARCHAR(5) NOT NULL
);

CREATE TABLE IF NOT EXISTS peminjaman (
kode_peminjaman VARCHAR (10) NOT NULL PRIMARY KEY,
id_anggota VARCHAR (10) NOT NULL,
id_petugas VARCHAR (10) NOT NULL,
tanggal_pinjam TIMESTAMP DEFAULT NOW(),
tanggal_kembali TIMESTAMP DEFAULT NOW(),
kode_buku VARCHAR (10) NOT NULL,
FOREIGN KEY (id_anggota) REFERENCES anggota(id_anggota),
FOREIGN KEY (id_petugas) REFERENCES petugas(id_petugas),
FOREIGN KEY (kode_buku) REFERENCES buku (kode_buku)
);

CREATE TABLE IF NOT EXISTS pengembalian (
kode_kembali VARCHAR (10) NOT NULL PRIMARY KEY,
id_anggota VARCHAR (10) NOT NULL,
kode_buku VARCHAR (10) NOT NULL,
id_petugas VARCHAR (10) NOT NULL,
tgl_pinjam TIMESTAMP DEFAULT NOW(),
tgl_kembali TIMESTAMP DEFAULT NOW(),
denda VARCHAR (15) NOT NULL,
FOREIGN KEY (id_anggota) REFERENCES anggota(id_anggota),
FOREIGN KEY (kode_buku) REFERENCES buku(kode_buku),
FOREIGN KEY (id_petugas) REFERENCES petugas(id_petugas)
);

SHOW TABLES;

INSERT INTO anggota VALUES 
('A001','Tomo','Jakarta','2004-06-22',085211112222,'Laki-Laki'),
('A002','Siska','Surabaya','2002-03-15',085233334444,'Perempuan'),
('A003','Budi','Bandung','2001-11-08',085255556666,'Laki-Laki'),
('A004','Dewi','Yogyakarta','2002-09-30',085277778888,'Perempuan'),
('A005','Hadi','Gresik','2003-07-12',085299990000,'Laki-Laki'),
('A006','Rina','Lamongan','2005-05-24',085211112233,'Perempuan'),
('A007','Adi','Bandung','2001-01-18',085211112244,'Laki-Laki'),
('A008','Lina','Jombang','2000-08-03',085211112255,'Perempuan'),
('A009','Andi','Bojonegoro','2004-04-06',085211112266,'Laki-Laki'),
('A010','Rani','Sidoarjo','2004-12-29',085211112277,'Perempuan');
SELECT * FROM anggota;

INSERT INTO buku VALUES 
('B001','Pulang','Tereliye','2017','9'),
('B002','Matahari','Tereliye','2019','8'),
('B003','Senja','Biru','2018','7'),
('B004','Pelangi','Jompi','2020','6'),
('B005','Cahaya','Sukarso','2016','5'),
('B006','Bulan','Tereliye','2015','4'),
('B007','Mimpi','Dono','2021','3'),
('B008','Harapan','Pidie Baiq','2014','2'),
('B009','Bintang','Tereliye','2023','1'),
('B010','Menara','Joko','2022','3');
SELECT * FROM buku;

INSERT INTO petugas VALUES 
('P001','Jay12','Jy01','Jayadi'),
('P002','Lia34','Li02','Liana'),
('P003','Dan45','Da03','Dandi'),
('P004','Ria56','Ri04','Riana'),
('P005','Yan67','Ya05','Yani'),
('P006','Rio78','Ro06','Rio'),
('P007','Fitri89','Fi07','Fitria'),
('P008','Anto90','An08','Anton'),
('P009','Sari01','Sa09','Sarita'),
('P010','Dian12','Di10','Diana');
SELECT * FROM petugas;

INSERT INTO peminjaman VALUES 
('PM001','A004','P004',NOW(), NOW() + INTERVAL 7 DAY,'B001'),
('PM002','A001','P005',NOW(), NOW() + INTERVAL 7 DAY,'B009'),
('PM003','A006','P003',NOW(), NOW() + INTERVAL 7 DAY,'B006'),
('PM004','A009','P007',NOW(), NOW() + INTERVAL 7 DAY,'B004'),
('PM005','A008','P008',NOW(), NOW() + INTERVAL 7 DAY,'B003'),
('PM006','A003','P003',NOW(), NOW() + INTERVAL 7 DAY,'B008'),
('PM007','A005','P010',NOW(), NOW() + INTERVAL 7 DAY,'B010'),
('PM008','A002','P001',NOW(), NOW() + INTERVAL 7 DAY,'B007'),
('PM009','A010','P002',NOW(), NOW() + INTERVAL 7 DAY,'B005'),
('PM010','A007','P003',NOW(), NOW() + INTERVAL 7 DAY,'B002'),
('PM011','A005','P005',NOW(), NOW() + INTERVAL 7 DAY,'B008'),
('PM012','A005','P005',NOW(), NOW() + INTERVAL 7 DAY,'B003'),
('PM013','A005','P003',NOW(), NOW() + INTERVAL 7 DAY,'B001'),
('PM014','A005','P003',NOW(), NOW() + INTERVAL 7 DAY,'B009');
SELECT * FROM peminjaman;

UPDATE peminjaman SET kode_buku = 'B002' WHERE kode_peminjaman = 'PM015'; 
UPDATE peminjaman SET kode_buku = 'B002' WHERE kode_peminjaman = 'PM012'; 

INSERT INTO pengembalian VALUES 
('PG001','A009','B004','P007',NOW(), NOW() + INTERVAL 7 DAY,'Rp.0'),
('PG002','A001','B009','P002',NOW(), NOW() + INTERVAL 7 DAY,'Rp.0'),
('PG003','A006','B006','P003',NOW(), NOW() + INTERVAL 7 DAY,'Rp.30000');

INSERT INTO peminjaman VALUES 
('PM015','A005','P002','2024-02-17','2024-02-22','B010');

-- Nomor 1

DELIMITER //
CREATE PROCEDURE InDefault (
    IN nomor_peminjaman VARCHAR(10),
    IN nomor_anggota VARCHAR(100),
    IN nomor_petugas VARCHAR(100),
    IN nomor_buku VARCHAR(100)
)
BEGIN
    INSERT INTO peminjaman (kode_peminjaman,id_anggota, id_petugas, kode_buku)
    VALUES (nomor_peminjaman,nomor_anggota, nomor_petugas, nomor_buku);
END //
DELIMITER ;
CALL InDefault('PM015','A001', 'P005', 'B009');
SELECT * FROM peminjaman;

-- Nomor 2
DELIMITER //
CREATE PROCEDURE satuAtribut (
	IN nama_member VARCHAR (100)
)
BEGIN 
	SELECT * FROM petugas WHERE nama = nama_member;
END //
DELIMITER;
DROP PROCEDURE satuAtribut;
CALL satuAtribut('Rio');

-- Nomor 3 

DELIMITER //
CREATE PROCEDURE duaAtribut (
	IN nomor_buku VARCHAR (100),
	IN nama_penulis VARCHAR (100)
)
BEGIN 
	SELECT * FROM buku WHERE
	kode_buku = nomor_buku AND
	pengarang_buku = nama_penulis;
END //
DELIMITER;

CALL duaAtribut ('B001','Tereliye');

-- Nomor 4

DELIMITER //
CREATE PROCEDURE tigaAtribut (
	IN nomor_petugas VARCHAR (100),
	IN nama_user VARCHAR (100),
	IN nama_petugas VARCHAR (100)
	)
BEGIN 
	SELECT * FROM petugas WHERE
	id_petugas = nomor_petugas AND
	username = nama_user AND
	nama = nama_petugas;
END //
DELIMITER //

CALL tigaAtribut ('P008','Anto90','Anton')

-- Nomor 5
DELIMITER //

CREATE PROCEDURE InInsert (
    IN nomor_peminjaman VARCHAR(10),
    IN nomor_anggota VARCHAR(10),
    IN nomor_petugas VARCHAR(10),
    IN nomor_buku VARCHAR(10)
)
BEGIN
    INSERT INTO peminjaman (kode_peminjaman, id_anggota, id_petugas, kode_buku)
    VALUES (nomor_peminjaman, nomor_anggota, nomor_petugas, nomor_buku);
END //

DELIMITER ;
CALL InInsert('PM025', 'A001', 'P001', 'B001');
SELECT * FROM peminjaman;

-- Nomor 6
DELIMITER //
CREATE PROCEDURE contohOut ( 
	OUT jumlah_buku INT (10)
)
BEGIN 
	SELECT COUNT(*)INTO jumlah_buku FROM peminjaman;
END //
DELIMITER;

CALL contohOut(@jumlah_buku);
SELECT  @jumlah_buku;

-- Nomor 7
DELIMITER //
CREATE PROCEDURE TambahStok(
	INOUT TambahStok INT,
	IN KodeBuku VARCHAR(100)
)
BEGIN
	SET TambahStok = TambahStok+2;
	UPDATE buku SET jumlah_buku = TambahStok;
	END//
	DELIMITER;
	
SET @TambahStok = 7;
CALL TambahStok(@jumlah_buku,'B001');
SELECT @jumlah_buku;

ex: contoh TRIGGER pada SQL
DELIMITER //
DROP PROCEDURE TambahStok;
CREATE TRIGGER after_insert_pengembalian
AFTER INSERT ON pengembalian
FOR EACH ROW
BEGIN
    DELETE FROM peminjaman
    WHERE id_anggota = NEW.id_anggota
    AND kode_buku = NEW.kode_buku;
END;
//
DELIMITER ;
